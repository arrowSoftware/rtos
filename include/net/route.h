/******************************************************************************
*   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
*
*   This file is part of Real rtos.
*   Copyright (C) 2008 - 2009 Surplus Users Ham Society
*
*   Real rtos is free software: you can redistribute it and/or modify
*   it under the terms of the GNU Lesser General Public License as published by
*   the Free Software Foundation, either version 2.1 of the License, or
*   (at your option) any later version.
*
*   Real rtos is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*   GNU Lesser General Public License for more details.
*
*   You should have received a copy of the GNU Lesser General Public License
*   along with Real rtos.  If not, see <http://www.gnu.org/licenses/>.
******************************************************************************/

/* route.h - Routing header */

#ifndef _route_h
#define _route_h

#include <rtos.h>
#include <sys/socket.h>
#include <net/if.h>
#include <net/radix.h>

#define RTF_UP			0x0001			/* Route usable */
#define RTF_GATEWAY		0x0002			/* Dest gateway */
#define RTF_HOST		0x0004			/* Host entry */
#define RTF_REJECT		0x0008			/* Net unrachable */
#define RTF_DYNAMIC		0x0010			/* Dymanic route */
#define RTF_MODIFIED		0x0020			/* Modify dynamic */
#define RTF_DONE		0x0040			/* Message confirm */
#define RTF_MASK		0x0080			/* Subnet mask pres */
#define RTF_CLONING		0x0100			/* Genereate on use */
#define RTF_XRESOLVE		0x0200			/* Ext. resolver */
#define RTF_LLINFO		0x0400			/* Generated by arp */
#define RTF_STATIC		0x0800			/* Static route */
#define RTF_BLACKHOLE		0x1000			/* Discard pkts */
#define RTF_MGMT		0x2000			/* Management proto */
#define RTF_PROTO2		0x4000			/* Proto 2 */
#define RTF_PROTO1		0x8000			/* Proto 1 */
#define RTF_CLONED		RTF_PROTO1
#define RTF_DELETE		RTF_PROTO2

#define RTF_PINNED		0x100000		/* Future use */
#define RTF_LOCAL		0x200000		/* Local address */
#define RTF_BROACAST		0x400000		/* Broadcast address */
#define RTF_MULTICAST		0x800000		/* Multicast address */

#define RTM_VERSION		3			/* Version */

#define RTM_ADD			0x01			/* Add route */
#define RTM_DELETE		0x02			/* Delete route */
#define RTM_CHANGE		0x03			/* Chg metrics/flags */
#define RTM_GET			0x04			/* Get metrics */
#define RTM_LOSING		0x05			/* Partitioning */
#define RTM_REDIRECT		0x06			/* Use different rt */
#define RTM_MISS		0x07			/* Lookup failed addr */
#define RTM_LOCK		0x08			/* Fix metrics */
#define RTM_OLDADD		0x09			/* Caused SIOCADDRT */
#define RTM_OLDDEL		0x0a			/* Caused SIOCDELRT */
#define RTM_RESOLVE		0x0b			/* Req to resolve */
#define RTM_NEWADDR		0x0c			/* Add address to if */
#define RTM_DELADDR		0x0d			/* Rem address fr if */
#define RTM_IFINFO		0x0e			/* Iff down/up */

#define RTV_MTU			0x01			/* Lock/init mtu */
#define RTV_HOPCOUNT		0x02			/* Lock/init hopcount */
#define RTV_EXPIRE		0x04			/* Lock/init expire */
#define RTV_RPIPE		0x08			/* Lock/init rpipe */
#define RTV_SPIPE		0x10			/* Lock/init spipe */
#define RTV_SSTRESH		0x20			/* Lock/init sstresh */
#define RTV_RTT			0x40			/* Lock/init rtt */
#define RTV_RTTVAR		0x80			/* Lock/init rttvar */

#define RTAX_DST		0			/* Destination socket */
#define RTAX_GATEWAY		1			/* Gateway sockaddr */
#define RTAX_NETMASK		2			/* Netmask sockaddr */
#define RTAX_GENMASK		3			/* Cloning mask */
#define RTAX_IFP		4			/* Interface name */
#define RTAX_IFA		5			/* Inteface address */
#define RTAX_AUTHOR		6			/* Author of redir */
#define RTAX_BRD		7			/* Newaddr */
#define RTAX_MAX		8			/* Array max */

#define RTM_RTTUNIT		1000000			/* Units for rtt */

#ifndef _ASMLANGUAGE

#ifdef __cplusplus
extern "C" {
#endif

/* Routing stat */
struct rtstat {
  short				rts_badredirect;	/* Bad redirect calls */
  short				rts_dynamic;		/* Route cr. by redir */
  short				rts_newgateway;		/* Route mod. redir */
  short				rts_unreach;		/* Lookups failed */
  short				rts_wildcard;		/* Lookups sat. by wc */
};

/* Address info */
struct rt_addrinfo {
  int 				rti_addrs;		/* Address */
  struct sockaddr		*rti_info[RTAX_MAX];	/* Socket addresses */
};

struct route_cb {
  int				ip_count;		/* Ip count */
  int 				ns_count;		/* Ns count */
  int				iso_count;		/* Iso count */
  int				any_count;		/* Anything count */
};

/* Metrics info */
struct rt_metrics {
  unsigned long			rmx_locks;		/* Locks */
  unsigned long			rmx_mtu;		/* Mtu for this path */
  unsigned long			rmx_expire;		/* Lifetime for route */
  unsigned long			rmx_recvpipe;		/* Receive pipe */
  unsigned long			rmx_sendpipe;		/* Send pipe */
  unsigned long			rmx_ssthresh;		/* Treshold */
  unsigned long			rmx_rtt;		/* Round trip time */
  unsigned long			rmx_rttvar;		/* Rtt variance */
  unsigned short		rmx_hopcount;		/* Max hops */
  unsigned short		rmx_mss;		/* Max seg size */
};

/* Routing entry */
struct rtentry {
  struct radix_node		rt_nodes[2];		/* Radix nodes */
  struct sockaddr		*rt_gateway;		/* Value */
  short				rt_flags;		/* Flags */
  short				rt_refcnt;		/* Reference count */
  unsigned long			rt_use;			/* Raw nr. pkts forw */
  struct ifnet			*rt_ifp;		/* Interface to use */
  struct ifaddr			*rt_ifa;		/* Inteface to use */
  struct sockaddr		*rt_genmask;		/* Generation cloned */
  void				*rt_llinfo;		/* Link-lvl nfo cache */
  struct rtentry		*rt_gwroute;		/* Gatewayed routes */
  int				rt_mod;			/* Last modified */
  struct rt_metrics		rt_rmx;			/* Metrics */
  struct rtentry		*rt_parent;		/* Par cloned route */
};

#define rt_key(r)		(*(struct sockaddr **)&((r)->rt_nodes->rn_key))
#define rt_mask(r)		(*(struct sockaddr **)&((r)->rt_nodes->rn_mask))

struct route {
  struct rtentry		*ro_rt;			/* Route entry */
  struct sockaddr		ro_dst;			/* Route destination */
};

/* Types */
typedef struct routeNode {
  struct routeEntry		*pFrwd;			/* Forward pointer */
  struct routeEntry		*pBack;			/* Back pointer */
} ROUTE_NODE;

typedef struct routeEntry {
  struct rtentry		rtEntry;		/* Route entry */
  BOOL				primaryRouteFlag;	/* Ip forward alt. */
  ROUTE_NODE			sameNode;		/* Same proto */
  ROUTE_NODE			diffNode;		/* Different proto */
} ROUTE_ENTRY;

typedef struct routeDesc {
  struct sockaddr		*pDstAddr;		/* Destination addr */
  struct sockaddr		*pNetMask;		/* Netmask */
  struct sockaddr		*pGateway;		/* Gateway */
  short				flags;			/* Flags */
  short				protoId;		/* Protocol id */
  struct ifnet			*pIf;			/* Pointer to if */

  long				value1;			/* Values */
  long				value2;
  long				value3;
  long				value4;
  long				value5;
  long				routeTag;		/* Property for value */
  unsigned char			weight;

  BOOL				primaryRouteFlag;	/* Primary route */
  void				*pData;			/* Additional data */
} ROUTE_DESC;

/* Macros */

/*******************************************************************************
 * RT_FREE - Free route
 * 
 * RETURNS: Reference count or error
 ******************************************************************************/

#define RTFREE(rt)							       \
  ((rt)->rt_refcnt <= 1) ? (rtfree(rt)) : ((rt)->rt_refcnt--)

/*******************************************************************************
 * ROUTE_ENTRY_KEY - Get key
 * 
 * RETURNS: Sockaddress for key
 ******************************************************************************/

#define ROUTE_ENTRY_KEY(r)						       \
  ((struct sockaddr *) (((r)->rtEntry).rt.nodes[0].rn_u.rn_leaf.rn_key))

/*******************************************************************************
 * ROUTE_ENTRY_MASK - Get mask
 * 
 * RETURNS: Sockaddress for mask
 ******************************************************************************/

#define ROUTE_ENTRY_MASK(r)						       \
  ((struct sockaddr *) (((r)->rtEntry).rt.nodes[0].rn_u.rn_leaf.rn_mask))

/*******************************************************************************
 * ROUTE_ENTRY_GATEWAY - Get gateway
 * 
 * RETURNS: Gateway
 ******************************************************************************/

#define ROUTE_ENTRY_GATEWAY(r)			((r)->rtEntry.rt_gateway

/*******************************************************************************
 * ROUTE_ENTRY_FLAGS - Get flags
 * 
 * RETURNS: Flags
 ******************************************************************************/

#define ROUTE_ENTRY_FLAGS(r)			((r)->rtEntry.rt_flags

/* Functions */
IMPORT void routeLibInit(void);
IMPORT void rtalloc(struct route *ro);
IMPORT struct rtentry* rtalloc1(struct sockaddr *dst,
				int report,
			        BOOL skipFlag);
IMPORT void rtfree(struct rtentry *rt);
IMPORT void ifafree(struct ifaddr *ifa);
IMPORT void rtredirect(struct sockaddr *dst,
		       struct sockaddr *gateway,
		       struct sockaddr *netmask,
		       int flags,
		       struct sockaddr *src,
		       struct rtentry **rtp);
IMPORT int rtioctl(unsigned long req, void *data);
IMPORT struct ifaddr* ifa_ifwithroute(int flags,
				      struct sockaddr *dst,
				      struct sockaddr *gateway);
IMPORT int rtrequest(int req,
		     struct sockaddr *dst,
		     struct sockaddr *gateway,
		     struct sockaddr *netmask,
                     int flags,
		     struct rtentry **ret_nrt);
IMPORT int rtsetgate(struct rtentry *rt_arg,
		     struct sockaddr *dst,
		     struct sockaddr *gateway);
IMPORT int rtinit(struct ifaddr *ifa, int cmd, int flags);

IMPORT STATUS rtrequestAddEqui(struct sockaddr *pDest,
			       struct sockaddr *pNetMask,
			       struct sockaddr *pGateway,
			       short flags,
			       short protoId,
			       unsigned char weight,
			       BOOL notifyFlag,
			       BOOL socketFlag,
			       ROUTE_ENTRY **dpRouteEntry);

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _ASMLANGUAGE */

#endif /* _route_h */

